    def create_resource(
            self,
            namespace: typing.Optional["str"] = None
    ) -> "{{ entity.class_name | to_status_class }}":
        """
        Creates the {{ entity.class_name }} in the currently
        configured Kubernetes cluster and returns the status information
        returned by the Kubernetes API after the create is complete.
        """
        names = [
            "create_namespaced_{{ entity.class_name | snake_case }}",
            {%- if entity.class_name == "CustomObject" %}
            "create_cluster_{{ entity.class_name | snake_case }}",
            {%- else %}
            "create_{{ entity.class_name | snake_case }}"
            {%- endif %}
        ]

        response = _kube_api.execute(
            action="create",
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={"body": self.to_dict()}
        )

        output = {{ entity.class_name | to_status_class }}()
        if response is not None:
            output.from_dict(_kube_api.to_kuber_dict(response.status))
        return output

    def replace_resource(
            self,
            namespace: typing.Optional["str"] = None
    ) -> "{{ entity.class_name | to_status_class }}":
        """
        Replaces the {{ entity.class_name }} in the currently
        configured Kubernetes cluster and returns the status information
        returned by the Kubernetes API after the replace is complete.
        """
        names = [
            "replace_namespaced_{{ entity.class_name | snake_case }}",
            {%- if entity.class_name == "CustomObject" %}
            "replace_cluster_{{ entity.class_name | snake_case }}",
            {%- else %}
            "replace_{{ entity.class_name | snake_case }}"
            {%- endif %}
        ]

        response = _kube_api.execute(
            action="replace",
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={"body": self.to_dict(), "name": self.metadata.name}
        )

        output = {{ entity.class_name | to_status_class }}()
        if response is not None:
            output.from_dict(_kube_api.to_kuber_dict(response.status))
        return output

    def patch_resource(
            self,
            namespace: typing.Optional["str"] = None
    ) -> "{{ entity.class_name | to_status_class }}":
        """
        Patches the {{ entity.class_name }} in the currently
        configured Kubernetes cluster and returns the status information
        returned by the Kubernetes API after the replace is complete.
        """
        names = [
            "patch_namespaced_{{ entity.class_name | snake_case }}",
            {%- if entity.class_name == "CustomObject" %}
            "patch_cluster_{{ entity.class_name | snake_case }}",
            {%- else %}
            "patch_{{ entity.class_name | snake_case }}"
            {%- endif %}
        ]

        response = _kube_api.execute(
            action="patch",
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={"body": self.to_dict(), "name": self.metadata.name}
        )

        output = {{ entity.class_name | to_status_class }}()
        if response is not None:
            output.from_dict(_kube_api.to_kuber_dict(response.status))
        return output

    def get_resource_status(
            self,
            namespace: typing.Optional["str"] = None
    ) -> "{{ entity.class_name | to_status_class }}":
        """
        Returns status information about the given resource within the cluster.
        """
        names = [
            "read_namespaced_{{ entity.class_name | snake_case }}",
            {%- if entity.class_name == "CustomObject" %}
            "read_cluster_{{ entity.class_name | snake_case }}",
            {%- else %}
            "read_{{ entity.class_name | snake_case }}",
            {%- endif %}
        ]

        response = _kube_api.execute(
            action="read",
            resource=self,
            names=names,
            namespace=namespace,
            api_client=None,
            api_args={"name": self.metadata.name}
        )

        output = {{ entity.class_name | to_status_class }}()
        if response is not None:
            output.from_dict(_kube_api.to_kuber_dict(response.status))
        return output
