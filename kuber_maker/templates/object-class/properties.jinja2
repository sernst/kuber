    {% for p, v in entity.properties.items() if base_class == "Definition" or p not in property_ignores %}
    {% if v.data_type.api_type == "Quantity" %}
    @property
    def {{ p | snake_case }}(self) -> typing.Optional[str]:
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        value = self._properties.get("{{ p }}")
        return f"{value}" if value is not None else None
    {% elif v.data_type.api_type == "IntOrString" and v.data_type.python_type == "str" %}
    @property
    def {{ p | snake_case }}(self) -> typing.Optional[str]:
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        value = self._properties.get("{{ p }}")
        return f"{value}" if value is not None else None
    {% elif v.data_type.api_type == "IntOrString" and v.data_type.python_type == "int" %}
    @property
    def {{ p | snake_case }}(self) -> typing.Optional[int]:
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        value = self._properties.get("{{ p }}")
        return int(value) if value is not None else None
    {% else %}
    @property
    def {{ p | snake_case }}(self) -> {{ v.data_type.type_hint }}:
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        return typing.cast(
            {{ v.data_type.type_hint }},
            self._properties.get("{{ p }}"),
        )
    {% endif %}
    {% if v.data_type.api_type == "Time" %}
    @{{ p | snake_case }}.setter
    def {{ p | snake_case }}(
            self,
            value: typing.Union[str, _datetime.datetime, _datetime.date]
    ):
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        if isinstance(value, _datetime.datetime):
            value = value.strftime("%Y-%m-%dT%H:%M:%SZ")
        elif isinstance(value, _datetime.date):
            value = value.strftime("%Y-%m-%dT00:00:00Z")
        self._properties["{{ p }}"] = value
    {% elif v.data_type.api_type == "Quantity" %}
    @{{ p | snake_case }}.setter
    def {{ p | snake_case }}(
            self,
            value: {{ v.data_type.type_hint }}
    ):
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        self._properties["{{ p }}"] = _types.integer_or_string(value)
    {% elif v.data_type.api_type == "IntOrString" %}
    @{{ p | snake_case }}.setter
    def {{ p | snake_case }}(
            self,
            value: {{ v.data_type.type_hint }}
    ):
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        self._properties["{{ p }}"] = _types.integer_or_string(value)
    {% elif v.data_type.code_import and v.data_type.python_type == "list" %}
    @{{ p | snake_case }}.setter
    def {{ p | snake_case }}(
            self,
            value: typing.Union[{{ v.data_type.type_hint }}, typing.List[dict]]
    ):
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        cleaned: typing.List[{{ v.data_type.item_type }}] = []
        for item in value:
            if isinstance(item, dict):
                item = typing.cast(
                    {{ v.data_type.item_type }},
                    {{ v.data_type.item_type }}().from_dict(item),
                )
            cleaned.append(typing.cast({{ v.data_type.item_type }}, item))
        self._properties["{{ p }}"] = cleaned
    {% elif v.data_type.code_import %}
    @{{ p | snake_case }}.setter
    def {{ p | snake_case }}(self, value: {{ v.data_type.setter_type_hint }}):
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        if isinstance(value, dict):
            value = typing.cast(
                {{ v.data_type.python_type }},
                {{ v.data_type.python_type }}().from_dict(value),
            )
        self._properties["{{ p }}"] = value
    {% else %}
    @{{ p | snake_case }}.setter
    def {{ p | snake_case }}(self, value: {{ v.data_type.type_hint }}):
        """
        {{ v.description | printable | wordwrap(width=60) | indent(width=8) }}
        """
        self._properties["{{ p }}"] = value
    {% endif %}
    {%  endfor %}